# .github/workflows/ci.yml
name: Python CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Use the Python version from Cookiecutter
        python-version: ["{{ cookiecutter.python_version }}"] 

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true # Often recommended for CI caching
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root # Install all groups for CI checks

      # If you want to install specific groups only:
      # - name: Install dependencies (core + dev)
      #   if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #   run: poetry install --no-interaction --no-root --with dev

      {% if cookiecutter.include_tests == 'yes' or cookiecutter.include_logging == 'yes' %} # Assuming linters are in dev group
      - name: Lint with Ruff (if linters are set up)
        run: |
          poetry run ruff check .
          poetry run ruff format --check .
      {% endif %}

      {% if cookiecutter.include_tests == 'yes' %}
      - name: Test with pytest
        run: |
          poetry run pytest
      {% endif %}