# This project uses Poetry for dependency management.
# The primary definition of all Python dependencies (core and optional)
# is in the `pyproject.toml` file.
#
# This `requirements.txt` file is NOT the primary source of dependencies
# for developing or installing this project if you are using Poetry or Conda
# as described in the README.md.
#
# --- How to Generate a `requirements.txt` from Poetry ---
# If you need a `requirements.txt` file for specific deployment scenarios,
# compatibility with other tools, or for environments where Poetry is not
# directly used, you can generate it from your `pyproject.toml` and `poetry.lock`
# files using Poetry's export command. This ensures consistency.
#
# 1. To generate `requirements.txt` with only main production dependencies:
#    poetry export -f requirements.txt --output requirements.txt --without-hashes
#
# 2. To include dependencies from specific optional groups (e.g., 'dev', 'fastapi'):
#    poetry export -f requirements.txt --output requirements-dev-fastapi.txt --with dev,fastapi --without-hashes
#
# 3. To include dependencies from ALL optional groups (creating a "full" list):
#    poetry export -f requirements.txt --output requirements-all.txt --all-extras --without-hashes
#    (Note: --all-extras will include all dependencies from all defined optional groups)
#
# It is strongly recommended to generate this file via `poetry export` rather than
# maintaining it manually, to ensure it accurately reflects your project's resolved dependencies.
#
# For initial project setup, please follow the Poetry or Conda instructions in the
# main README.md file to install dependencies directly from `pyproject.toml`.

# This template file intentionally does not list dependencies by default.
# Please generate it as needed using the 'poetry export' commands above.